name: UnitTest

on:
  push:
    branches:
      '**'
  pull_request:
    branches:
      '**'
      
  workflow_dispatch:

jobs:
  pester-test:
    name: Pester test
    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    runs-on: windows-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      
      - name: pester-tests-report
        uses: zyborg/pester-tests-report@v1.3.3
        with:
          include_paths: Tests
          github_token: ${{ secrets.GITHUB_TOKEN }}
   
  UpdateVersionBadge:
    name: Update Version Badge
    needs: pester-test
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      
  #    - name: Get the Version to update
  #      run: |
  #        if ( $File = get-childitem . | where Name -EQ "$(($env:GITHUB_REPOSITORY -split '/')[-1]).psd1" ) {
  #          $PSD = Get-Content $File.FullName -ErrorAction Stop
  #          $NewVer = $PSD | Select-String -Pattern "ModuleVersion = '(.*)'" -ErrorAction Stop | foreach { $_.Matches.Groups[1].Value }
  #        }
  #        else {
  #          # ----- getting link and removing surrounding ()
  #          $ExistingBadge = ($FileTxt | Select-String -Pattern "(\(https:\/\/img\.shields\.io\/badge\/Version-.*-.*\))" -ErrorAction Stop | foreach { $_.Matches.Groups[1].Value }).trimstart( '(' ).Trimend( ')' )
  #          # ----- Get the existing badge parameters
  #          $MatchingGroups = $ExistingBadge | Select-String -Pattern "https:\/\/img\.shields\.io\/badge\/Version-(.*)-(.*)" -ErrorAction Stop | foreach { $_.Matches.Groups }
  #          $SplitVer = $MatchingGroups[1].Value -split '\.'
  #          $NewVer = "$($SplitVer[0]).$($SplitVer[1]).$([int]$SplitVer[2] + 1)"
  #      }
        
        
      - name: Update Custom Badge
        uses: ./
        with:
          filename: 'readme.md'
          label: 'Version'
          message: '1.0.1'
          verbose: 'true'


#     - name: Commit
#       if: ${{ success() }}
#       run: |
#         git status
#         git config --global user.name 'github actions'      
#         git config --global user.email 'actions@github.com'
#         git ls-files --others --exclude-standard
#         git commit -am "skip ci - Unit Test Version Update"
#         git push
